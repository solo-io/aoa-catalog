apiVersion: gateway.solo.io/v1
kind: VirtualService
metadata:
  name: bookinfo-vs
  namespace: gloo-system
spec:
  sslConfig:
    secretRef:
      name: cf-advanced-tls-secret
      namespace: gloo-system
  virtualHost:
    domains:
    - 'bookinfo.edge.glooplatform.com'
    routes:
    - matchers:
         - prefix: /api-key
        directResponseAction:
          status: 200
          body: "bookinfo-key: N2YwMDIxZTEtNGUzNS1jNzgzLTRkYjAtYjE2YzRkZGVmNjcy"
    # if provided a valid api-key, jwt token, and logged in user then route to v2 upstream (red stars)
    - matchers:
      - headers:
         - name: cookie
        prefix: /
      routeAction:
        single:
          upstream:
            name: bookinfo-v2-productpage-9080
            namespace: gloo-system
    # if provided a valid api-key and jwt token, but are not logged in then route to v1 upstream (no stars / red stars)
    - matchers:
      - prefix: /
      routeAction:
        multi:
          destinations:
          - destination:
              upstream:
                name: bookinfo-v1-productpage-9080
                namespace: gloo-system
            weight: 100
          - destination:
              upstream:
                name: bookinfo-v2-productpage-9080
                namespace: gloo-system
            weight: 0
    options:
      extauth:
        configRef:
          name: apikey-auth
          namespace: gloo-system
      waf:
        configMapRuleSets:
           - configMapRef:
               name: wafrulesets
               namespace: gloo-system
        customInterventionMessage: 'ModSecurity intervention! Custom message details here..'
      jwt:
        providers:
          solo:
            tokenSource:
              headers:
              - header: x-token
              queryParams:
              - token
            claimsToHeaders:
            - claim: user
              header: subscriber
            issuer: solo.io
            jwks:
              local:
                key: |
                  -----BEGIN PUBLIC KEY-----
                  MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA6IA5LB7RG7eqoPyoP3GM
                  gWIdYKwIvYsekCHKf2Co3nCb7ii2kDsNNHJygTsHFO2v5Fqe0/z40A2Qtkf3GjKl
                  CnFJCoxWX22PZNqEC4b1g12xqZyv7AE8pqhLkp/EFfB1abZJtboIC1y280JVk+iK
                  iEYGYjC5/PxV3Ynk1QuqC+rcdu6XP6m76p/bzYygaBGVU6ekaDG5B3vheqOlAe/f
                  hq82aS9V0vjKZbob0uNJFB0diTgUVhFech+CN9lYX7ucUwA5OqRV7zpXTFzxo08c
                  K/WHCWcZX6TCsfcYHV90abTNl7v+n5JDJfxQJp4RKlVQ4CaEIKBwZtIj1dvbZ9wZ
                  gQIDAQAB
                  -----END PUBLIC KEY-----

apiVersion: gateway.solo.io/v1
kind: VirtualService
metadata:
  name: httpbin-vs
  namespace: gloo-system
spec:
  sslConfig:
    secretRef:
      name: upstream-tls
      namespace: gloo-system
  virtualHost:
    domains:
    - 'httpbin-local.glootest.com'
    options:
      extauth:
        configRef:
          name: httpbin-okta
          namespace: gloo-system
      rateLimitConfigs:
        refs:
        - name: global-limit
          namespace: gloo-system
      transformations:
        responseTransformation:
          transformationTemplate:
            body:
              text: '{% if header(":status") == "429" %}<html><body style="background-color:powderblue;"><h1>Too
                many Requests!</h1><p>Try again after 10 seconds</p></body></html>{%
                else %}{{ body() }}{% endif %}'
            parseBodyBehavior: DontParse
      waf:
        auditLogging:
          action: ALWAYS
          location: FILTER_STATE
        coreRuleSet:
          customSettingsString: "# default rules section\nSecRuleEngine On\nSecRequestBodyAccess
            On\nSecDefaultAction \"phase:1,log,auditlog,pass,status:403\"\nSecDefaultAction
            \"phase:2,log,auditlog,pass,status:403\"\n#\n# custom rules section\n#\n#
            -=[ Deny when a semi-colon is found in the 'ip' parameter ]=-\nSecRule
            ARGS:ip \";\" \"t:none,log,deny,msg:'semi-colon detected in ip parameter',id:2\"\n#\n#
            \n# -=[ block incoming request if argument `?param1=test` ]=-\nSecRule
            ARGS:param1 \"test\" \"id:1,deny,msg:'failed test - param1=test'\"\n#\n#
            \n# -=[ block incoming request if header is set to User-Agent: scammer
            ]=-\nSecRule REQUEST_HEADERS:User-Agent \"scammer\" \"deny,status:403,id:107,phase:1,msg:'blocked
            scammer'\"\n#\n# \n# -=[ block incoming requests that do not match the
            ip below ]=-\n#SecRule REMOTE_ADDR \"!@ipMatch 173.175.0.0/16\" \"phase:1,deny,status:403,id:1,msg:'block
            ip'\"\n#\n# \n# -=[ only allow http2 connections ]=-\nSecAction \\\n  \"id:900230,\\\n
            \   phase:1,\\\n    nolog,\\\n    pass,\\\n    t:none,\\\n    setvar:'tx.allowed_http_versions=HTTP/2
            HTTP/2.0'\"\n#\n#\n# -=[ allow only letters in username ]=-\nSecRule ARGS:/username/
            \"[^a-zA-Z]\" \"t:none,phase:2,deny,id:6,log,msg:'allow only letters in
            username'\"\n#\n#\n# -=[ Block Countries ]=-\n# Rules in the IP Reputation
            file can check the client against a list of high\n# risk country codes.
            These countries have to be defined in the variable\n# tx.high_risk_country_codes
            via their ISO 3166 two-letter country code:\n# https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements\n#SecAction
            \\\n# \"id:900600,\\\n#  phase:1,\\\n#  nolog,\\\n#  pass,\\\n#  t:none,\\\n#
            \ msg:'requests from this country code are not allowed',\\\n#  setvar:'tx.high_risk_country_codes=UA
            ID YU LT EG RO BG TR RU PK MY CN'\"\n#\n#\n# -- [[ End of setup ]] --------------------------------------------------------\n#\n#
            The CRS checks the tx.crs_setup_version variable to ensure that the setup\n#
            has been loaded. If you are not planning to use this setup template,\n#
            you must manually set the tx.crs_setup_version variable before including\n#
            the CRS rules/* files.\n#\n# The variable is a numerical representation
            of the CRS version number.\n# E.g., v3.0.0 is represented as 300.\n#\nSecAction
            \\\n\"id:900990,\\\n  phase:1,\\\n  nolog,\\\n  pass,\\\n  t:none,\\\n
            \     setvar:tx.crs_setup_version=310\"\n"
        customInterventionMessage: 'ModSecurity intervention! Please check access
          logs for more details: kubectl -n gloo-system logs deploy/gateway-proxy
          -f'
    routes:
    - matchers:
      - prefix: /
      routeAction:
        single:
          upstream:
            name: httpbin-httpbin-8000
            namespace: gloo-system
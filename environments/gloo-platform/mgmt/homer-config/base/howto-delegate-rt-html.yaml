apiVersion: networking.gloo.solo.io/v2
kind: RouteTable
metadata:
  name: homer-howto
  namespace: homer-portal
  labels:
    homer: howto
spec:
  http:
    - name: howto-ui
      labels:
        content-type: text/html
      matchers:
      - uri:
          exact: /howto/ui
      directResponse:
        body: |
          <!DOCTYPE html>
          <html lang="en">          

          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Gloo Mesh UI Walkthrough</title>
              <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
              <style>
                  body {
                      font-family: 'Arial', sans-serif;
                      margin: 0;
                      padding: 0;
                      overflow-x: hidden;
                  }          

                  .parallax-container {
                      display: flex;
                      flex-direction: column;
                      align-items: center;
                      justify-content: center;
                      height: 40vh;
                      background: linear-gradient(45deg, #3498db, #9b59b6);
                      color: #fff;
                      text-align: center;
                      position: relative;
                  }          

                  .parallax-content {
                      position: relative;
                      z-index: 2;
                      padding: 20px;
                  }          

                  .parallax-bg {
                      position: absolute;
                      top: 0;
                      left: 0;
                      width: 100%;
                      height: 100%;
                      z-index: 1;
                      opacity: 0.5;
                  }          

                  h1 {
                      font-size: 36px;
                      margin-bottom: 20px;
                  }          

                  h2 {
                      font-size: 24px;
                      margin-bottom: 10px;
                  }          

                  p {
                      line-height: 1.6;
                  }          

                  .note {
                      background-color: rgba(255, 255, 255, 0.9);
                      border-radius: 8px;
                      padding: 20px;
                      margin: 20px 0;
                      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
                      transition: transform 0.3s ease-in-out;
                  }          

                  .note:hover {
                      transform: scale(1.03);
                  }          

                  .highlight {
                      color: #3498db;
                      font-weight: bold;
                  }          

                  .icon {
                      font-size: 32px;
                      margin-right: 10px;
                      color: #3498db;
                  }
              </style>
          </head>          

          <body>
              <div class="parallax-container">
                  <div class="parallax-bg"></div>
                  <div class="parallax-content">
                      <h1>Gloo Mesh UI Walkthrough</h1>
                  </div>
              </div>          

              <div class="parallax-content">
                  <div class="note">
                      <h2><i class="icon fas fa-walking"></i><span class="highlight">Review registered clusters:</span></h2>
                      <p>Examine the list of clusters registered in Gloo Mesh UI.</p>
                  </div>          

                  <div class="note">
                      <h2><i class="icon fas fa-network-wired"></i><span class="highlight">Review discovered Istio resources:</span></h2>
                      <p>Explore Istio resources discovered by Gloo Mesh UI.</p>
                  </div>          

                  <div class="note">
                      <h2><i class="icon fas fa-cube"></i><span class="highlight">Review Workspace concepts:</span></h2>
                      <p>Understand the concept of Workspaces in Gloo Mesh UI, including grouping of clusters/namespaces, discovered services, and import/export relationships between workspaces.</p>
                      <ul>
                          <li>Grouping of clusters/namespaces</li>
                          <li>Discovered services</li>
                          <li>Import/export relationships between workspaces</li>
                          <li>Workspace options (federation, service isolation, trimProxyConfig)</li>
                      </ul>
                  </div>          

                  <div class="note">
                      <h2><i class="icon fas fa-network"></i><span class="highlight">Review Virtual Gateway concepts:</span></h2>
                      <p>Explore the concepts related to Virtual Gateways in Gloo Mesh UI.</p>
                  </div>          

                  <div class="note">
                      <h2><i class="icon fas fa-code"></i><span class="highlight">Review APIs tab:</span></h2>
                      <p>Inspect the APIs tab to view discovered Portal APIs and GraphQL APIs.</p>
                  </div>          

                  <div class="note">
                      <h2><i class="icon fas fa-door-open"></i><span class="highlight">Review Portals tab:</span></h2>
                      <p>Examine the Portals tab to understand the available portals in Gloo Mesh UI.</p>
                  </div>          

                  <div class="note">
                      <h2><i class="icon fas fa-user-shield"></i><span class="highlight">Review Gloo Platform Policies:</span></h2>
                      <p>Explore various policies available in Gloo Mesh UI for Gloo Platform.</p>
                      <ul>
                          <li>Access</li>
                          <li>Access Log</li>
                          <li>Active Health Check</li>
                          <li>Client TLS</li>
                          <li>Connection</li>
                          <li>CORS</li>
                          <li>CSRF</li>
                          <li>Data Loss Prevention</li>
                          <li>Ext Auth</li>
                          <li>Failover</li>
                          <li>Fault Injection</li>
                          <li>GraphQL Allowed Query</li>
                          <li>GraphQL Persisted Query Cache</li>
                          <li>Header Manipulation</li>
                          <li>HTTP Buffer</li>
                          <li>JWT</li>
                          <li>Listener Connection</li>
                          <li>Load Balancer</li>
                          <li>Mirror</li>
                          <li>Outlier Detection</li>
                          <li>Proxy Protocol</li>
                          <li>Rate Limit</li>
                          <li>Retry Timeout</li>
                          <li>Transformation</li>
                          <li>Trim Proxy Config</li>
                          <li>WAF</li>
                          <li>WASM Deployment</li>
                      </ul>
                  </div>          

                  <div class="note">
                      <h2><i class="icon fas fa-bug"></i><span class="highlight">Review Debug tab:</span></h2>
                      <p>Investigate the Debug tab for debugging and troubleshooting purposes in Gloo Mesh UI.</p>
                  </div>          

              </div>          

              <script>
                  window.addEventListener('scroll', function () {
                      var scrolled = window.scrollY;
                      var parallaxBg = document.querySelector('.parallax-bg');
                      parallaxBg.style.transform = 'translateY(' + scrolled * 0.5 + 'px)';
                  });
              </script>
          </body>          

          </html>


        status: 200
    - name: howto-admin
      labels:
        content-type: text/html
      matchers:
      - uri:
          exact: /howto/admin
      directResponse:
        body: |
          <!DOCTYPE html>
          <html lang="en">          

          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Gloo Platform Admin Applications Walkthrough</title>
              <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
              <style>
                  body {
                      font-family: 'Arial', sans-serif;
                      margin: 0;
                      padding: 0;
                      overflow-x: hidden;
                  }          

                  .parallax-container {
                      display: flex;
                      flex-direction: column;
                      align-items: center;
                      justify-content: center;
                      height: 40vh;
                      background: linear-gradient(45deg, #3498db, #9b59b6);
                      color: #fff;
                      text-align: center;
                      position: relative;
                  }          

                  .parallax-content {
                      position: relative;
                      z-index: 2;
                      padding: 20px;
                  }          

                  .parallax-bg {
                      position: absolute;
                      top: 0;
                      left: 0;
                      width: 100%;
                      height: 100%;
                      z-index: 1;
                      opacity: 0.5;
                  }          

                  h1 {
                      font-size: 36px;
                      margin-bottom: 20px;
                  }          

                  h2 {
                      font-size: 24px;
                      margin-bottom: 10px;
                  }          

                  p {
                      line-height: 1.6;
                  }          

                  .note {
                      background-color: rgba(255, 255, 255, 0.9);
                      border-radius: 8px;
                      padding: 20px;
                      margin: 20px 0;
                      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
                      transition: transform 0.3s ease-in-out;
                  }          

                  .note:hover {
                      transform: scale(1.03);
                  }          

                  .highlight {
                      color: #3498db;
                      font-weight: bold;
                  }          

                  .icon {
                      font-size: 32px;
                      margin-right: 10px;
                      color: #3498db;
                  }
              </style>
          </head>          

          <body>
              <div class="parallax-container">
                  <div class="parallax-bg"></div>
                  <div class="parallax-content">
                      <h1>Gloo Platform Admin Applications Walkthrough</h1>
                  </div>
              </div>          

              <div class="parallax-content">
                  <div class="note">
                      <h2><i class="icon fas fas fa-heartbeat"></i><span class="highlight">Uptime Dashboard:</span></h2>
                      <p><span class="highlight">Description:</span> A self-hosted monitoring tool for applications running on glooplatform.com</p>
                      <ol>
                          <li>Login through Google Auth to access the Uptime Dashboard</li>
                          <li>View/Update the list of applications to monitor</li>
                      </ol>
                  </div>          

                  <div class="note">
                      <h2><i class="icon fas fa-chart-area"></i><span class="highlight">Prometheus:</span></h2>
                      <p><span class="highlight">Description:</span> Access to the Prometheus UI for querying metrics</p>
                      <ol>
                          <li>Login through Google Auth to access the Prometheus UI</li>
                          <li>Provide a query to view metrics coming from the OTEL pipeline such as `istio_requests_total`</li>
                      </ol>
                  </div>          

                  <div class="note">
                      <h2><i class="icon fab fa-git-alt"></i><span class="highlight">Argo CD:</span></h2>
                      <p><span class="highlight">Description:</span> Access to the Argo CD UI for managing GitOps deployments</p>
                      <ol>
                          <li>Login through Google Auth to access the Argo CD UI</li>
                          <li>Useful to view/edit apps that are synced with the aoa-catalog github repo</li>
                          <li>Useful for viewing deployment configuration / logs / errors when troubleshooting</li>
                          <li>Ability to turn on/off automatic sync of apps</li>
                      </ol>
                  </div>          

                  <div class="note">
                      <h2><i class="icon fas fa-chart-area"></i><span class="highlight">Grafana:</span></h2>
                      <p><span class="highlight">Description:</span> Access to the Grafana UI for viewing dashboards</p>
                      <ol>
                          <li>Login through Google Auth to access the Argo CD UI</li>
                          <li>View dashboards for Gloo Platform Operations, Kubernetes Cluster, Istio, and Gloo Portal</li>
                      </ol>
                  </div>
              </div>          

              <script>
                  window.addEventListener('scroll', function () {
                      var scrolled = window.scrollY;
                      var parallaxBg = document.querySelector('.parallax-bg');
                      parallaxBg.style.transform = 'translateY(' + scrolled * 0.5 + 'px)';
                  });
              </script>
          </body>          

          </html>


        status: 200
    - name: howto-portal
      labels:
        content-type: text/html
      matchers:
      - uri:
          exact: /howto/portal
      directResponse:
        body: |
          <!DOCTYPE html>
          <html lang="en">          

          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Gloo Platform Portal Demo Walkthrough</title>
              <style>
                  body {
                      font-family: 'Arial', sans-serif;
                      margin: 20px;
                  }          

                  h1 {
                      color: #333;
                  }          

                  h2 {
                      color: #333;
                      font-size: 18px;
                  }          

                  p {
                      color: #666;
                  }          

                  ol {
                      margin-bottom: 20px;
                  }          

                  li {
                      margin-bottom: 10px;
                  }          

                  .note {
                      background-color: #f0f0f0;
                      padding: 10px;
                      margin-bottom: 20px;
                  }          

                  .highlight {
                      color: #0066cc;
                      font-weight: bold;
                  }
              </style>
          </head>          

          <body>
              <h1>Gloo Platform Portal Demo Walkthrough</h1>          

              <div class="note">
                  <p><span class="highlight">Backstage:</span></p>
                  <p><span class="highlight">Description:</span> Use the Gloo Platform Portal Backstage frontend plug-in to create a developer
                      portal frontend for your developers so that they can view and access your REST API catalog. This demo uses Backstages as
                      an example of an internal developer portal use-case. The APIs exposed through Gloo Gateway with the label `portal:
                      internal` are automatically populated in the Backstage catalog. The APIs can be secured using external auth and rate
                      limiting policies to implement a usage plan (i.e. 15 req/min) mapped to a grouping of users (i.e. bronze, silver, gold)</p>
                  <ol>
                      <li>Navigate to the Backstage UI > Gloo Portal > APIs tab to see publicly available APIs</li>
                      <li>Review the Redoc and Swagger views for the APIs and note that the APIs are secured with Gloo Platform ExtAuthPolicy</li>
                      <li>Navigate to the Backstage UI > Gloo Portal > Overview tab to log in
                          - Use the username/password: <code>jdoe@solo.io</code>/<code>gloo-dev</code></li>
                      <li>Note that the logged in user now has access to the Usage Plans tab</li>
                      <li>Generate an API Key</li>
                      <li>Navigate to the API associated with the API Key > Swagger UI > Authorize > Enter the API Key</li>
                      <li>Now you can use the try-it-now feature to test the API</li>
                      <li>Note that the API Key is rate limited after 15 requests/minute</li>
                  </ol>
              </div>          

              <div class="note">
                  <p><span class="highlight">React External Portal Demo:</span></p>
                  <p><span class="highlight">Description:</span> This is an example Solo.io Gloo Platform Dev Portal frontend app, built with
                      Vite, and configured to use React and Typescript. It can be used to view information about your APIs and usage plans,
                      add or delete API keys, and view your OpenAPI schemas using an embedded Redoc UI or Swagger UI view. It also can be
                      personalized with images and colors to match your branding and preferences. The use case for this demo is similar to
                      above, but serves as an external customer facing portal where the focus is more on accessing and consuming otherwise
                      protected APIs. The APIs exposed through Gloo Gateway with the label `portal: external` are automatically populated
                      in this External Portal.</p>
                  <ol>
                      <li>Navigate to the React Portal Frontend UI > APIs tab as an unauthenticated user to see that the APIs are not visible</li>
                      <li>Login through Okta with the username/password: <code>jdoe@solo.io</code>/<code>gloo-dev</code></li>
                      <li>Note that the logged in user now has APIs available to view</li>
                      <li>Select the User icon > API Keys tab and generate an API Key for a product</li>
                      <li>Navigate to the API associated with the API Key > Swagger UI > Authorize > Enter the API Key</li>
                      <li>Now you can use the try-it-now feature to test the API</li>
                      <li>Note that the API Key is rate limited based on usage plan used (i.e. bronze, silver, gold)</li>
                  </ol>
              </div>          

              <div class="note">
                  <p><span class="highlight">Clickhouse Portal Analytics:</span></p>
                  <p><span class="highlight">Description:</span> More information in the Docs: <a
                          href="https://docs.solo.io/gloo-gateway/latest/portal/admin/monitor/" target="_blank">https://docs.solo.io/gloo-gateway/latest/portal/admin/monitor/</a>
                      As an API product owner, you can collect analytics about your API usage. This way, you can identify ways to better
                      monetize your API products based on actual usage. When the end user queries one of your APIs, your Gloo Gateway
                      handles the request. You can enable the gateway to generate access logs. This way, the Open Telemetry (OTel) metrics
                      pipeline that you set up can store the access logs in a Clickhouse storage database. As the Portal admin, you can
                      then view usage information for your API products in the Gloo UI through a Grafana dashboard.</p>
                  <ol>
                      <li>Navigate to the Clickhouse Portal Analytics tab to see recent API Product usage globally. If you have been using
                          the previous demos, you should see some usage.</li>
                      <li>Note that these metrics are coming from the OTEL pipeline and can be configured declaratively using Helm values.</li>
                      <li>This dashboard is tracking Geo-IP information, which can be seen on the map. (Scroll to US)</li>
                      <li>Access logs are also captured and displayed in the recent requests panel</li>
                  </ol>
              </div>
          </body>          

          </html>

        status: 200
    - name: howto-rollouts-demo
      labels:
        content-type: text/html
      matchers:
      - uri:
          exact: /howto/rollouts
      directResponse:
        body: |
          <!DOCTYPE html>
          <html lang="en">          

          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Argo Rollouts Demo Walkthrough</title>
              <style>
                  body {
                      font-family: 'Arial', sans-serif;
                      margin: 20px;
                  }          

                  h1 {
                      color: #333;
                  }          

                  h2 {
                      color: #333;
                      font-size: 18px;
                  }          

                  p {
                      color: #666;
                  }          

                  ol {
                      margin-bottom: 20px;
                  }          

                  li {
                      margin-bottom: 10px;
                  }          

                  .note {
                      background-color: #f0f0f0;
                      padding: 10px;
                      margin-bottom: 20px;
                  }          

                  .highlight {
                      color: #0066cc;
                      font-weight: bold;
                  }
              </style>
          </head>          

          <body>
              <h1>Argo Rollouts Demo Walkthrough</h1>          

              <div class="note">
                  <p><span class="highlight">Gloo Mesh Argo Rollouts Plugin:</span></p>
                  <p>At Solo.io, we've integrated Argo Rollouts' traffic management capabilities with Gloo Mesh's advanced routing
                      mechanisms through a supported plugin. Organizations can ensure a smooth and controlled transition from one version
                      of an application to the next, minimizing downtime and reducing the risk of disruptions. This allows teams to adopt
                      advanced deployment strategies like canary releases and blue-green deployments, allowing for safe experimentation
                      with new features and configurations. The result? Faster innovation cycles, higher customer satisfaction, and
                      ultimately, a stronger market position for the organization.</p>
                  <p><span class="highlight">Additional Links:</span> <a href="https://github.com/ably77/gloo-platform-argo-rollouts-blog"
                          target="_blank">https://github.com/ably77/gloo-platform-argo-rollouts-blog</a></p>
              </div>          

              <h2>Progressive Delivery Demo:</h2>
              <ol>
                  <li>In two separate windows (side-by-side) open up the Argo Rollouts Demo Dashboard and the Argo Rollouts Demo App</li>
                  <li>In the Argo Rollouts Demo Dashboard select the rollouts-demo tile</li>
                  <li>In the Containers tile on the top right, change the image tag to another color such as blue > green, any color should
                      work. (i.e. argoproj/rollouts-demo:green) and click save. This will automatically trigger a new progressive rollout
                      of the application</li>
                  <li>In the Argo Rollouts Demo App, you will start to see the new version of the application being deployed, mapped to the
                      weights specified in the rollout manifest as the blue squares start to shift to green squares.</li>
                  <li>In the Argo Rollouts Demo Dashboard you can also see the progress steps in the left-hand sidebar</li>
                  <li>Once the rollout is complete, you can see the new version of the application deployed in the Argo Rollouts Demo App</li>
              </ol>          

              <h2>Rollback Demo:</h2>
              <ol>
                  <li>To demonstrate a rollback, change the image to a color tag prefixed with `bad-` such as
                      `argoproj/rollouts-demo:bad-yellow`</li>
                  <li>This will trigger a new progressive rollout of the application. You will see that the new yellow squares in the demo
                      app will have a red border around them, indicating an app that is causing errors (non-200)</li>
                  <li>Argo Rollouts will automatically detect this and rollback to the previous stable version of the application. If you
                      take a look at the AnalysisTemplate, you will see that the rollout failed the analysis step which requires < 5% of the
                      traffic to be non-200.</li>
                  <li>Note that these metrics are coming from the Istio metrics that are queried using Prometheus</li>
                  <li>To reset the demo, switch the image back to a stable state, preferably `argoproj/rollouts-demo:blue` for the next demo</li>
              </ol>          

              <h2>Argo CD UI:</h2>
              <ol>
                  <li>Argo CD is not required to use Argo Rollouts but can be integrated together to provide a UI for managing GitOps
                      deployments.</li>
                  <li>Open the Argo CD UI in a third window and search for wave-rollouts-demo-aoa. The Argo CD UI is another place to watch
                      the rollout in action.</li>
                  <li>When triggering a new rollout, watch the Argo CD UI to see rollout steps as they progress. You should see a new pod
                      being deployed as part of the Rollout and a new AnalysisTemplate that gets created</li>
                  <li>Select the `rollouts-demo-rt-443` RouteTable tile to see that the Argo Rollouts plugin is controlling the weights
                      of the routes according to the steps defined in the rollout manifest</li>
                  <li>Selecting the `rollouts-demo` Rollout tile you can see the live manifest to see the declarative configuration of
                      the rollout</li>
                  <li>Additionally, if you select the more tab, you will see the integrated read-only version of the Argo Rollouts Demo
                      Dashboard used earlier</li>
                  <li>Discuss that in theory, if the sync on this Argo Application was turned on, that the rollout could be triggered by a
                      git commit to the repo and synced automatically.</li>
              </ol>
          </body>          

          </html>


        status: 200
    - name: howto-tiered-app
      labels:
        content-type: text/html
      matchers:
      - uri:
          exact: /howto/tiered-app
      directResponse:
        body: |
          <!DOCTYPE html>
          <html lang="en">          

          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Multicluster Tiered App Demo Walkthrough</title>
              <style>
                  body {
                      font-family: 'Arial', sans-serif;
                      margin: 20px;
                  }          

                  h1 {
                      color: #333;
                  }          

                  p {
                      color: #666;
                  }          

                  ol {
                      margin-bottom: 20px;
                  }          

                  li {
                      margin-bottom: 10px;
                  }          

                  .note {
                      background-color: #f0f0f0;
                      padding: 10px;
                      margin-bottom: 20px;
                  }          

                  .highlight {
                      color: #0066cc;
                      font-weight: bold;
                  }
              </style>
          </head>          

          <body>
              <h1>Multicluster Tiered App Demo Walkthrough</h1>          

              <div class="note">
                  <p><span class="highlight">Description:</span></p>
                  <p>This demo shows a tiered application deployed across glooplatform-central and glooplatform-east, where the central
                      region cluster holds the "core" application which is self-contained in this region. The east region cluster extends
                      the core application across multiple clusters and regions over mTLS. This architecture provides flexibility for
                      application deployments or migration patterns. For example, the developers in the glooplatform-east cluster can leverage
                      the complete set of core application features, as well as extend the application with additional features that are only
                      relevant to the east region. For migrations, this architecture can be used for a phased migration of the core application
                      from cluster to cluster by using a strangler pattern approach where components of the core application can be migrated
                      to the east region cluster in a phased approach.</p>
              </div>          

              <ol>
                  <li>Select the <span class="highlight">Tiered Mesh Application tile</span> to see the <span
                          class="highlight">/ns-1/ui</span> endpoint. Note that you can also use the <span
                          class="highlight">/ns-1</span> endpoint directly to see the direct API output</li>
                  <li>Note that you can also explore the other namespaces as well by changing between <span
                          class="highlight">/ns-1</span> and <span class="highlight">/ns-4</span> endpoints</li>
                  <li>Select the <span class="highlight">Tiered Mesh Application - Gloo UI tile</span> to open up the <span
                          class="highlight">Gloo Mesh UI service graph</span></li>
                  <li>Note that the service graph shows the core application in the central region cluster, and the extended application
                      in the east region cluster</li>
                  <li>Navigate to the strangler-pattern service UI in your browser at <span
                          class="highlight">/east/ns-1-ui</span> to see the extended application in the east region cluster</li>
                  <li>Note that the strangler-pattern service calls services in glooplatform-central as well as additional services in
                      the local cluster as part of the call chain. This can be visualized in the graph by the arrow direction from
                      <span class="highlight">strangler-pattern</span> to <span class="highlight">throbbing-field</span></li>
                  <li>Discuss advantages of this architecture for migrations and flexibility for developers</li>
              </ol>
          </body>          

          </html>
        status: 200

    - name: howto-main
      matchers:
      - uri:
          prefix: /howto
      forwardTo:
        destinations:
          - ref:
              name: homer-portal-howto
              namespace: homer-portal
            port:
              number: 8080
apiVersion: gateway.solo.io/v1
kind: RouteOption
metadata:
  name: httpbin-route-policies
  namespace: httpbin
spec:
  options:
    jwt:
      disable: true
    extauth:
      configRef:
        name: httpbin-okta
        namespace: gloo-system
    headerManipulation:
      # add headers to all responses
      requestHeadersToAdd:
        - header:
            key: "foo"
            value: "bar"
        - header:
            key: "x-id"
            value: "12345"
    rateLimitConfigs:
      refs:
      - name: httpbin-ratelimit-config
        namespace: httpbin
    transformations:
      responseTransformation:
        transformationTemplate:
          body:
            text: '{% if header(":status") == "429" %}<html><body style="background-color:powderblue;"><h1>Too
              many Requests!</h1><p>Try again after 10 seconds</p></body></html>{%
              else %}{{ body() }}{% endif %}'
          parseBodyBehavior: DontParse
    waf:
      auditLogging:
        action: ALWAYS
        location: FILTER_STATE
      coreRuleSet:
        customSettingsString: |
          # default rules section
          SecRuleEngine On
          SecRequestBodyAccess On
          SecDefaultAction "phase:1,log,auditlog,pass,status:403"
          SecDefaultAction "phase:2,log,auditlog,pass,status:403"
          
          # custom rules section
          # -=[ Deny when a semi-colon is found in the 'ip' parameter ]=-
          SecRule ARGS:ip ";" "t:none,log,deny,msg:'semi-colon detected in ip parameter',id:2"
          
          # -=[ block incoming request if argument `?param1=test` ]=-
          SecRule ARGS:param1 "test" "id:1,deny,msg:'failed test - param1=test'"
          
          # -=[ block incoming request if header is set to User-Agent: scammer ]=-
          SecRule REQUEST_HEADERS:User-Agent "scammer" "deny,status:403,id:107,phase:1,msg:'blocked scammer'"
          
          # -=[ block incoming requests that do not match the ip below ]=-
          # SecRule REMOTE_ADDR "!@ipMatch 173.175.0.0/16" "phase:1,deny,status:403,id:1,msg:'block ip'"
          
          # -=[ only allow http2 connections ]=-
          SecAction \
            "id:900230,\
             phase:1,\
             nolog,\
             pass,\
             t:none,\
             setvar:'tx.allowed_http_versions=HTTP/2 HTTP/2.0'"
          
          # -=[ allow only letters in username ]=-
          SecRule ARGS:/username/ "[^a-zA-Z]" "t:none,phase:2,deny,id:6,log,msg:'allow only letters in username'"
          
          # -=[ Block Countries ]=-
          # Rules in the IP Reputation file can check the client against a list of high
          # risk country codes. These countries have to be defined in the variable
          # tx.high_risk_country_codes via their ISO 3166 two-letter country code:
          # https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements
          # SecAction \
          #   "id:900600,\
          #    phase:1,\
          #    nolog,\
          #    pass,\
          #    t:none,\
          #    msg:'requests from this country code are not allowed',\
          #    setvar:'tx.high_risk_country_codes=UA ID YU LT EG RO BG TR RU PK MY CN'"
          
          # -- [[ End of setup ]] --------------------------------------------------------
          # The CRS checks the tx.crs_setup_version variable to ensure that the setup
          # has been loaded. If you are not planning to use this setup template,
          # you must manually set the tx.crs_setup_version variable before including
          # the CRS rules/* files.
          # The variable is a numerical representation of the CRS version number.
          # E.g., v3.0.0 is represented as 300.
          SecAction \
            "id:900990,\
             phase:1,\
             nolog,\
             pass,\
             t:none,\
             setvar:tx.crs_setup_version=310"

## Test Virtual Gateway
apiVersion: networking.gloo.solo.io/v2
kind: VirtualGateway
metadata:
  name: mgmt-north-south-gw-443-test
  namespace: istio-gateways
spec:
  listeners:
    - http: {}
      port:
        number: 80
      allowedRouteTables:
        - host: '*'
    - http: {}
      port:
        number: 443
      allowedRouteTables:
        - host: '*'
      tls:
        mode: SIMPLE
        secretName: tls-secret
  workloads:
    - selector:
        cluster: mgmt
        labels:
          istio: ingressgateway-nonexistent
---
## Delegated Route Tables
apiVersion: networking.gloo.solo.io/v2
kind: RouteTable
metadata:
  name: prefix-match
  namespace: bookinfo-frontends
  # Label for the sub-table set
  labels:
    table: myapp
spec:
  # Lower weight means second priority in the sub-table order
  weight: 90
  http:
    # Table routes any requests to 'one.solo.io/myapp/.*'
    - matchers:
        - uri:
            prefix: /myapp
            ignoreCase: true
      forwardTo:
        destinations:
          - ref:
              name: productpage
              namespace: bookinfo-frontends
              cluster: mgmt
            port:
              number: 9080
            kind: SERVICE
---
apiVersion: networking.gloo.solo.io/v2
kind: RouteTable
metadata:
  name: query-parameters-match
  namespace: bookinfo-frontends
  # Label for the sub-table set
  labels:
    table: myapp
spec:
  # Lower weight means second priority in the sub-table order
  weight: 80
  http:
    # Table routes any requests to 'one.solo.io/myapp/.*?version=stage'
    - matchers:
        - uri:
            prefix: /myapp
        - queryParameters:
            - name: version
              value: stage
      forwardTo:
        destinations:
          - ref:
              name: productpage
              namespace: bookinfo-frontends
              cluster: mgmt
            port:
              number: 9080
            kind: SERVICE
---
apiVersion: networking.gloo.solo.io/v2
kind: RouteTable
metadata:
  name: delegate-weight
  namespace: bookinfo-frontends
spec:
  hosts:
    - '*'
  virtualGateways:
    - cluster: mgmt
      name: mgmt-north-south-gw-443-test
      namespace: istio-gateways
  http:
    - delegate:
        # Selects tables based on label
        routeTables:
          - labels:
              table: myapp
        # Delegates based on order of weights
        sortMethod: TABLE_WEIGHT

---
apiVersion: networking.gloo.solo.io/v2
kind: RouteTable
metadata:
  name: exact-match
  namespace: bookinfo-frontends
  # Label for the sub-table set
  labels:
    table: myapp
spec:
  # Higher weight means first priority in the sub-table order
  weight: 100
  http:
    # Match only requests to exactly 'gloo-ambient-test-cluster-1.solo.io/myapp/foo'
    - matchers:
        - uri:
            exact: /myapp/foo
      forwardTo:
        destinations:
          - ref:
              name: productpage
              namespace: bookinfo-frontends
              cluster: mgmt
            port:
              number: 9080
            kind: SERVICE
---
apiVersion: networking.gloo.solo.io/v2
kind: RouteTable
metadata:
  name: delegate-specificity
  namespace: bookinfo-frontends
spec:
  hosts:
    - '*'
  virtualGateways:
    - cluster: mgmt
      name: mgmt-north-south-gw-443-test
      namespace: istio-gateways
  http:
    - delegate:
        # Selects tables based on label
        routeTables:
          - labels:
              table: myapp
        # Delegates based on route specificity
        sortMethod: ROUTE_SPECIFICITY
---
apiVersion: security.policy.gloo.solo.io/v2
kind: AccessPolicy
metadata:
  name: access-reviews
  namespace: bookinfo-frontends
spec:
  applyToDestinations:
    - port:
        number: 9080
      selector:
        labels:
          app: reviews
  config:
    authn:
      tlsMode: STRICT
    authz:
      allowedClients:
        - serviceAccountSelector:
            labels:
              account: productpage
      allowedPaths:
        - /reviews*
---
apiVersion: security.policy.gloo.solo.io/v2
kind: AccessPolicy
metadata:
  name: access-ratings
  namespace: bookinfo-frontends
spec:
  applyToDestinations:
    - port:
        number: 9080
      selector:
        labels:
          app: ratings
  config:
    authn:
      tlsMode: STRICT
    authz:
      allowedClients:
        - serviceAccountSelector:
            labels:
              account: productpage
        - serviceAccountSelector:
            labels:
              account: reviews
      allowedPaths:
        - /ratings*
---
apiVersion: security.policy.gloo.solo.io/v2
kind: AccessPolicy
metadata:
  name: access-details
  namespace: bookinfo-frontends
spec:
  applyToDestinations:
    - selector:
        cluster: mgmt
        labels:
          app: details
  config:
    authn:
      tlsMode: STRICT
    authz:
      allowedClients:
        - serviceAccountSelector:
            labels:
              account: productpage
      allowedPaths:
        - /details*
---
apiVersion: networking.gloo.solo.io/v2
kind: RouteTable
metadata:
  name: bookinfo-routes
  namespace: bookinfo-frontends
spec:
  hosts:
    - "reviews.bookinfo.svc.cluster.local"
  http:
    - name: reviews
      labels:
        route: reviews
      matchers:
        - uri:
            prefix: /reviews
      forwardTo:
        destinations:
          - ref:
              name: reviews
              namespace: bookinfo-backends
              cluster: mgmt
            port:
              number: 9080
    - name: ratings
      labels:
        route: ratings
      matchers:
        - uri:
            prefix: /ratings
      forwardTo:
        destinations:
          - ref:
              name: ratings
              namespace: bookinfo-backends
              cluster: mgmt
            port:
              number: 9080
---
apiVersion: networking.gloo.solo.io/v2
kind: ExternalService
metadata:
  name: json-external
  namespace: bookinfo-backends
spec:
  hosts:
    - jsonplaceholder.typicode.com
  ports:
    - number: 443
      name: https
      protocol: HTTPS
---
apiVersion: networking.gloo.solo.io/v2
kind: RouteTable
metadata:
  name: bookinfo-eastwest-ratings-routes
  namespace: bookinfo-frontends
spec:
  hosts:
    - "ratings.bookinfo.svc.cluster.local"
  http:
    - name: ratings
      labels:
        route: ratings
      matchers:
        - uri:
            prefix: /ratings
      forwardTo:
        destinations:
          - ref:
              name: ratings
              namespace: bookinfo-frontends
              cluster: mgmt
            port:
              number: 9080
---
apiVersion: observability.policy.gloo.solo.io/v2
kind: AccessLogPolicy
metadata:
  name: access-log-policy
  namespace: bookinfo-frontends
spec:
  applyToWorkloads:
    - selector:
        cluster: mgmt
        labels:
          app: reviews
        namespace: bookinfo-frontends
  config:
    filters:
      #- statusCodeMatcher:
      #    value: 200
      #    comparator: EQ
      - headerMatcher:
          name: foo
          value: bar
          regex: false
          invertMatch: false
    #includedRequestHeaders:
    #  - x-user-agent
    #includedResponseHeaders:
    #  - x-server
    #includedResponseTrailers:
    #  - x-expires
    #includedFilterStateObjects:
---
apiVersion: security.policy.gloo.solo.io/v2
kind: CORSPolicy
metadata:
  annotations:
    cluster.solo.io/cluster: mgmt
  name: simple-cors
  namespace: bookinfo-frontends
spec:
  applyToRoutes:
    - route:
        labels:
          route: ratings
  config:
    maxAge: 1m
    allowCredentials: true
    allowHeaders:
      - foo
      - bar
    allowMethods:
      - GET
    allowOrigins:
      - exact: http://istio.io
---
apiVersion: trafficcontrol.policy.gloo.solo.io/v2
kind: TransformationPolicy
metadata:
  annotations:
    cluster.solo.io/cluster: mgmt
  name: transformation-policy
  namespace: bookinfo-frontends
spec:
  applyToRoutes:
    - route:
        labels:
          route: ratings
  config:
    phase:
      postAuthz:
        priority: 0
    request:
      injaTemplate:
        headers:
          foo:
            text: '{{ header("x-org") }}'
---
apiVersion: networking.gloo.solo.io/v2
kind: ExternalService
metadata:
  annotations:
    cluster.solo.io/cluster: mgmt
  name: external-service
  namespace: bookinfo-frontends
spec:
  hosts:
    - httpbin.org
  ports:
    - name: http
      number: 80
      protocol: HTTP
---
apiVersion: networking.gloo.solo.io/v2
kind: RouteTable
metadata:
  annotations:
    cluster.solo.io/cluster: mgmt
  name: external-service-northsouth
  namespace: bookinfo-frontends
spec:
  defaultDestination:
    kind: EXTERNAL_SERVICE
    port:
      number: 80
    ref:
      name: external-service
      namespace: bookinfo-frontends
  hosts:
    - www.example.com
  http:
    - forwardTo: {}
      labels:
        "no": auth
      matchers:
        - headers:
            - name: noauth
              value: "true"
      name: external-service-no-auth
    - forwardTo: {}
      labels:
        route: external-service
      name: external-service-northsouth
  virtualGateways:
    - cluster: mgmt
      name: mgmt-north-south-gw-443-test
      namespace: istio-gateways
---
apiVersion: networking.gloo.solo.io/v2
kind: RouteTable
metadata:
  name: httpbin-routetable
  namespace: bookinfo-frontends
spec:
  hosts:
    - '*'
  http:
    - name: httpbin-routetable
      labels:
        route: httpbin
      matchers:
        - uri:
            prefix: /httpbin/anything
      forwardTo:
        destinations:
          - ref:
              name: external-service
              namespace: bookinfo-backends
        pathRewrite: /anything
  virtualGateways:
    - cluster: mgmt
      name: mgmt-north-south-gw-443-test
      namespace: istio-gateways
---
apiVersion: security.policy.gloo.solo.io/v2
kind: ExtAuthPolicy
metadata:
  annotations:
    cluster.solo.io/cluster: mgmt
  name: basic-ext-auth
  namespace: bookinfo-frontends
spec:
  applyToDestinations:
    - port:
        number: 9080
      selector:
        labels:
          app: reviews
  config:
    glooAuth:
      configs:
        - basicAuth:
            apr:
              users:
                user:
                  hashedPassword: 8BvzLUO9IfGPGGsPnAgSu1
                  salt: TYiryv0/
    server:
      name: default-server
---
apiVersion: admin.gloo.solo.io/v2
kind: ExtAuthServer
metadata:
  annotations:
    cluster.solo.io/cluster: mgmt
  name: default-server
  namespace: bookinfo-frontends
spec:
  destinationServer:
    port:
      number: 8083
    ref:
      cluster: mgmt
      name: ext-auth-service
      namespace: gloo-mesh-addons
---
apiVersion: resilience.policy.gloo.solo.io/v2
kind: FailoverPolicy
metadata:
  annotations:
    cluster.solo.io/cluster: mgmt
  name: locality-based-failover
  namespace: bookinfo-frontends
spec:
  applyToDestinations:
    - kind: VIRTUAL_DESTINATION
      selector: {}
  config:
    localityMappings:
      - from:
          region: us-east
        to:
          - region: us-west
---
apiVersion: resilience.policy.gloo.solo.io/v2
kind: FaultInjectionPolicy
metadata:
  annotations:
    cluster.solo.io/cluster: mgmt
  name: faultinjection-basic
  namespace: bookinfo-frontends
spec:
  applyToRoutes:
    - route:
        labels:
          route: ratings
  config:
    abort:
      percentage: 1
      httpStatus: 418
---
apiVersion: trafficcontrol.policy.gloo.solo.io/v2
kind: HeaderManipulationPolicy
metadata:
  annotations:
    cluster.solo.io/cluster: mgmt
  name: modify-header-hsts
  namespace: bookinfo-frontends
spec:
  applyToRoutes:
    - route:
        labels:
          route: ratings
  config:
    appendRequestHeaders:
      strict-transport-security: max-age=16070400; includeSubDomains
      x-custom-request: bookinfo
    appendResponseHeaders:
      x-content-type-options: nosniff
      x-frame-options: deny
      x-custom-response: bookinfo
    removeRequestHeaders:
      - user-agent
    removeResponseHeaders:
      - x-server
      - x-envoy-upstream-service-time
---
apiVersion: networking.gloo.solo.io/v2
kind: RouteTable
metadata:
  annotations:
    cluster.solo.io/cluster: mgmt
  name: reviews-mirror-rt
  namespace: bookinfo-frontends
spec:
  hosts:
    - reviews
  http:
    - forwardTo:
        destinations:
          - ref:
              name: reviews
              namespace: bookinfo-frontends
      labels:
        route: reviews-federated
  workloadSelectors:
    - {}
---
apiVersion: trafficcontrol.policy.gloo.solo.io/v2
kind: MirrorPolicy
metadata:
  annotations:
    cluster.solo.io/cluster: mgmt
  name: mirror-policy
  namespace: bookinfo-frontends
spec:
  applyToRoutes:
    - route:
        labels:
          route: reviews-federated
  config:
    destination:
      port:
        number: 9080
      ref:
        cluster: mgmt
        name: reviews
        namespace: bookinfo-frontends
---
apiVersion: resilience.policy.gloo.solo.io/v2
kind: OutlierDetectionPolicy
metadata:
  annotations:
    cluster.solo.io/cluster: mgmt
  name: outlier-detection
  namespace: bookinfo-frontends
spec:
  applyToDestinations:
    - kind: VIRTUAL_DESTINATION
      selector: {}
  config:
    baseEjectionTime: 30s
    consecutiveErrors: 2
    interval: 1s
    maxEjectionPercent: 100
---
apiVersion: trafficcontrol.policy.gloo.solo.io/v2
kind: ProxyProtocolPolicy
metadata:
  annotations:
    cluster.solo.io/cluster: mgmt
  name: haproxy-policy
  namespace: istio-gateways
spec:
  applyToListeners:
    - port:
        number: 80
      virtualGateway:
        cluster: mgmt
        name: mgmt-north-south-gw-443-test
        namespace: istio-gateways
  config:
    enableProxyProtocol: true
---
apiVersion: security.policy.gloo.solo.io/v2
kind: CSRFPolicy
metadata:
  annotations:
    cluster.solo.io/cluster: "mgmt"
  name: csrf-policy
  namespace: bookinfo-frontends
spec:
  applyToRoutes:
    - route:
        labels:
          route: productpage
  config:
    additionalOrigins:
      - regex: allowThisOne.solo.io
    filterEnabled: true
---
apiVersion: security.policy.gloo.solo.io/v2
kind: JWTPolicy
metadata:
  annotations:
    cluster.solo.io/cluster: mgmt
  name: jwt-policy
  namespace: bookinfo-frontends
spec:
  applyToRoutes:
    - route:
        labels:
          route: productpage
  config:
    phase:
      preAuthz: {}
    providers:
      provider1:
        claimsToHeaders:
          - append: true
            claim: org
            header: x-org
        issuer: https://localhost
        local:
          inline: |-
            -----BEGIN RSA PUBLIC KEY-----
            MIIBCgKCAQEAyTnCHqv2VYNyDUkeFXM6guSjDBH6op1WTAgMIY57vbjrXxbgi63g
            MdxNww5kf0xeIQYg3maNfghY66x9HQrbocs/UEv/mk76mHURztIywJK+tTTx0jN9
            8TH8O2s2xHKbqL/rIM1gEtvxZtV5DOD+bTHF/UONDxlE/w3xwTZOmCDquTKauEWk
            Xcb2/Bt1jGK9GMOnopynQcXnomy9bsESrUA1qlBi0CYXuMPxxn8iVh4a4cDwVrl/
            ztR0Lce4RAWJO5q27ZB0OKCBdQTtCtRFiIv8tSHN8wTf987ykotMIwSaExLvTZ1b
            lZ7q8UmMODESVaV1SBWvAvbF99CgaT/D9QIDAQAB
            -----END RSA PUBLIC KEY-----
---
apiVersion: trafficcontrol.policy.gloo.solo.io/v2
kind: HTTPBufferPolicy
metadata:
  annotations:
    cluster.solo.io/cluster: mgmt
  name: http-buffer
  namespace: bookinfo-frontends
spec:
  applyToRoutes:
    - route:
        labels:
          route: productpage
  config:
    maxRequestBytes: 16384
---
apiVersion: security.policy.gloo.solo.io/v2
kind: WAFPolicy
metadata:
  annotations:
    cluster.solo.io/cluster: mgmt
  name: basic-waf-auth
  namespace: bookinfo-frontends
spec:
  applyToRoutes:
    - route:
        labels:
          route: ratings
  config:
    customInterventionMessage: custom-intervention-message
    customRuleSets:
      - ruleStr: |2
          SecRuleEngine On
          SecRule REQUEST_HEADERS:User-Agent "test([1-5])$" "deny,status:403,id:1,phase:1,msg:'blocked scammer'"
    disableCoreRuleSet: true
    priority: 0
---
apiVersion: security.policy.gloo.solo.io/v2
kind: DLPPolicy
metadata:
  annotations:
    cluster.solo.io/cluster: ""
  name: dlp-policy-custom-actions
  namespace: bookinfo-frontends
spec:
  applyToRoutes:
    - route:
        labels:
          route: productpage
  config:
    actions:
      - predefinedAction: ALL_CREDIT_CARDS
      - predefinedAction: SSN
---
apiVersion: security.policy.gloo.solo.io/v2
kind: ClientTLSPolicy
metadata:
  annotations:
    cluster.solo.io/cluster: mgmt
  name: client-tls-policy
  namespace: bookinfo-frontends
spec:
  applyToDestinations:
    - port:
        number: 9080
      selector:
        labels:
          app: productpage
  mutual:
    config:
      credentialName: client-credential
---
apiVersion: trafficcontrol.policy.gloo.solo.io/v2
kind: RateLimitClientConfig
metadata:
  annotations:
    cluster.solo.io/cluster: mgmt
  name: rl-client-config
  namespace: bookinfo-frontends
spec:
  raw:
    rateLimits:
      - actions:
          - genericKey:
              descriptorValue: counter
---
apiVersion: trafficcontrol.policy.gloo.solo.io/v2
kind: RateLimitPolicy
metadata:
  annotations:
    cluster.solo.io/cluster: mgmt
  name: rl-policy
  namespace: bookinfo-frontends
spec:
  applyToRoutes:
    - route:
        labels:
          route: ratings
  config:
    phase:
      postAuthz: {}
    ratelimitClientConfig:
      name: rl-client-config
    ratelimitServerConfig:
      name: rl-server-config
      namespace: gloo-mesh-addons
    serverSettings:
      name: rl-server
---
apiVersion: trafficcontrol.policy.gloo.solo.io/v2
kind: RateLimitPolicy
metadata:
  annotations:
    cluster.solo.io/cluster: mgmt
  name: rl-reviews-policy
  namespace: bookinfo-frontends
spec:
  applyToRoutes:
    - route:
        labels:
          route: reviews
  config:
    phase:
      postAuthz: {}
    ratelimitClientConfig:
      name: rl-client-config
    ratelimitServerConfig:
      name: rl-reviews-server-config
      namespace: gloo-mesh-addons
    serverSettings:
      name: rl-server
---
apiVersion: admin.gloo.solo.io/v2
kind: RateLimitServerConfig
metadata:
  annotations:
    cluster.solo.io/cluster: mgmt
  name: rl-reviews-server-config
  namespace: gloo-mesh-addons
spec:
  destinationServers:
    - port:
        number: 8083
      ref:
        cluster: mgmt
        name: rate-limiter
        namespace: gloo-mesh-addons
  raw:
    descriptors:
      - key: generic_key
        rateLimit:
          requestsPerUnit: 10
          unit: DAY
        value: counter
---
apiVersion: admin.gloo.solo.io/v2
kind: RateLimitServerConfig
metadata:
  annotations:
    cluster.solo.io/cluster: mgmt
  name: rl-server-config
  namespace: gloo-mesh-addons
spec:
  destinationServers:
    - port:
        number: 8083
      ref:
        cluster: mgmt
        name: rate-limiter
        namespace: gloo-mesh-addons
  raw:
    descriptors:
      - key: generic_key
        rateLimit:
          requestsPerUnit: 1
          unit: DAY
        value: counter
---
apiVersion: admin.gloo.solo.io/v2
kind: RateLimitServerSettings
metadata:
  annotations:
    cluster.solo.io/cluster: mgmt
  name: rl-server
  namespace: bookinfo-frontends
spec:
  destinationServer:
    port:
      number: 8083
    ref:
      cluster: mgmt
      name: rate-limiter
      namespace: gloo-mesh-addons
---
apiVersion: resilience.policy.gloo.solo.io/v2
kind: RetryTimeoutPolicy
metadata:
  annotations:
    cluster.solo.io/cluster: mgmt
  name: retry-only
  namespace: bookinfo-frontends
spec:
  applyToRoutes:
    - route:
        labels:
          route: ratings # matches on route table route's labels
  config:
    retries:
      attempts: 5 # optional (default is 2)
      perTryTimeout: 2s
      # retryOn specifies the conditions under which retry takes place. One or more policies can be specified using a ‘,’ delimited list.
      retryOn: "connect-failure,refused-stream,unavailable,cancelled,retriable-status-codes"
      # retryRemoteLocalities specifies whether the retries should retry to other localities, will default to false
      retryRemoteLocalities: true
---
apiVersion: resilience.policy.gloo.solo.io/v2
kind: RetryTimeoutPolicy
metadata:
  annotations:
    cluster.solo.io/cluster: mgmt
  name: retry-timeout
  namespace: bookinfo-frontends
spec:
  applyToRoutes:
    - route:
        labels:
          route: reviews # matches on route table route's labels
  config:
    requestTimeout: 2s
---
apiVersion: resilience.policy.gloo.solo.io/v2
kind: ConnectionPolicy
metadata:
  annotations:
    cluster.solo.io/cluster: mgmt
  name: tcp-keepalive
  namespace: bookinfo-frontends
spec:
  applyToDestinations:
    - kind: VIRTUAL_DESTINATION
      selector: {}
  config:
    tcp:
      tcpKeepalive:
        time: "700s"
        probes: 20
        interval: "10s"
---
#apiVersion: extensions.policy.gloo.solo.io/v2
#kind: WasmDeploymentPolicy
#metadata:
#  annotations:
#    cluster.solo.io/cluster: mgmt
#  name: wasm-deployment-policy
#  namespace: bookinfo-frontends
#spec:
#  applyToWorkloads:
#  - selector:
#      cluster: mgmt
#      labels:
#        app: ratings
#      namespace: bookinfo-frontends
#  config:
#    filters:
#    - filterContext: SIDECAR_INBOUND
#      wasmImageSource:
#        wasmImageTag: webassemblyhub.io/ilackarms/assemblyscript-test:istio-1.8
---
apiVersion: apimanagement.gloo.solo.io/v2
kind: GraphQLResolverMap
metadata:
  annotations:
    cluster.solo.io/cluster: mgmt
  name: rest-resolvermap
  namespace: bookinfo-frontends
spec:
  types:
    Query:
      fields:
        productsForHome:
          resolvers:
            - restResolver:
                destinations:
                  - port:
                      number: 9080
                    ref:
                      cluster: mgmt
                      name: productpage
                      namespace: bookinfo-frontends
                request:
                  headers:
                    :path:
                      json: "/api/v1/products"
    Product:
      fields:
        reviews:
          variables:
            parentVar:
              graphqlParent: {}
            resolverResultVar:
              resolverResult: {}
          resolvers:
            - restResolver:
                destinations:
                  - port:
                      number: 9080
                    ref:
                      cluster: mgmt
                      name: reviews
                      namespace: bookinfo-frontends
                request:
                  headers:
                    :path:
                      jq: '"/reviews/" + (.parentVar.id | tostring)'
              resolverResultTransform:
                jq: '.resolverResultVar.reviews'
        ratings:
          variables:
            parentVar:
              graphqlParent: {}
            resolverResultVar:
              resolverResult: {}
          resolvers:
            - restResolver:
                destinations:
                  - port:
                      number: 9080
                    ref:
                      cluster: mgmt
                      name: ratings
                      namespace: bookinfo-frontends
                request:
                  headers:
                    :path:
                      jq: '"/ratings/" + (.parentVar.id | tostring)'
              resolverResultTransform:
                jq: '.resolverResultVar.ratings | to_entries | map(.reviewer=.key | .numStars=.value | del(.key,.value))'
---
apiVersion: apimanagement.gloo.solo.io/v2
kind: ApiDoc
metadata:
  annotations:
    cluster.solo.io/cluster: mgmt
  name: rest-graphqlsdl
  namespace: bookinfo-frontends
spec:
  graphql:
    schemaDefinition: |-
      type Query {
        """Description of a book in HTML"""
        productsForHome: [Product]
      }
      """Each book has a product entry"""
      type Product {
        """Unique identifier for books"""
      id: String
      """The book title"""
      title: String
      """Description of a book in HTML"""
      descriptionHtml: String
      """List of reader reviews for this book. Queries the reviews REST service"""
      reviews: [Review]
      """List of reader ratings for this book. Queries the ratings REST service"""
      ratings: [Rating]
      }
      """A book review"""
      type Review {
          """Name of the reviewer"""
          reviewer: String
          """Review details"""
          text: String
          "Reviewer Rating, this field is provided by the reviews REST service, which queries the ratings REST service"
          rating: ReviewerRating
      }
      type ReviewerRating {
        stars: Int
        color: String
      }
      """A book rating"""
      type Rating {
          """Name of the user peforming the rating"""
          reviewer: String
          """Number of stars for this rating"""
          numStars: Int
      }
---
apiVersion: apimanagement.gloo.solo.io/v2
kind: GraphQLSchema
metadata:
  annotations:
    cluster.solo.io/cluster: mgmt
  name: rest-graphqlschema
  namespace: bookinfo-frontends
spec:
  resolved:
    options:
      enableIntrospection: true
    resolverMapRefs:
      - clusterName: mgmt
        name: rest-resolvermap
        namespace: bookinfo-frontends
  schemaRef:
    clusterName: mgmt
    name: rest-graphqlsdl
    namespace: bookinfo-frontends
---
apiVersion: networking.gloo.solo.io/v2
kind: RouteTable
metadata:
  annotations:
    cluster.solo.io/cluster: mgmt
  name: graphql-routetable
  namespace: bookinfo-frontends
spec:
  hosts:
    - '*'
  http:
    - name: graphql-routetable
      labels:
        route: graphql
      graphql:
        options:
          logSensitiveInfo: true
        schema:
          clusterName: mgmt
          name: rest-graphqlschema
          namespace: bookinfo-frontends
      matchers:
        - uri:
            prefix: /graphql
  virtualGateways:
    - cluster: mgmt
      name: mgmt-north-south-gw-443-test
      namespace: istio-gateways
---
apiVersion: infrastructure.gloo.solo.io/v2
kind: CloudProvider
metadata:
  annotations:
    cluster.solo.io/cluster: mgmt
  name: aws-provider
  namespace: bookinfo-frontends
spec:
  aws:
    stsEndpoint: sts.amazonaws.com
    accountId: "410461945957"
    region: us-west-2
    lambda:
      invokeRoleName: gloo-mesh-e2e-role
---
#apiVersion: infrastructure.gloo.solo.io/v2
#kind: CloudResources
#metadata:
#  annotations:
#    cluster.solo.io/cluster: mgmt
#  name: aws-resources
#  namespace: bookinfo-frontends
#spec:
#  provider: aws-provider
#  lambda:
#    - logicalName: aws-dest
#      lambdaFunctionName: aidan-test
#      qualifier: $LATEST